{"doc_properties":{"page_margin":{"top":"75.5906px","left":"75.5906px","bottom":"75.5906px","right":"75.5906px"}},"doc_contents":"<p>(function($) {\n\n    const this_process_name = 'flatos_docwriter';\n\n    var _w = new FlatOS.Window(this_process_name),\n        _i = new FlatOS.System.Icons(this_process_name),\n        _a = new FlatOS.Application(this_process_name),\n        _u = new FlatOS.User();\n\n    var instance = _w.getInstanceID(),\n        $_w = _w.get();\n\n    var file_info = {},\n        currPanel = 0,\n        prevpanel;\n\n    _i.registerIcon('paste', '    ');\n    _i.registerIcon('cut', '');\n    _i.registerIcon('copy', '<line fill=\"#373636\" stroke=\"#424143\" stroke-miterlimit=\"10\" x1=\"2.51\" y1=\"11.197\" x2=\"10.098\" y2=\"11.197\"></line>');\n    _i.registerIcon('bold', '');\n\n    var medium = new Medium({\n        element: $_w.find('.docwriter_document_page_content')[0],\n        autofocus: true,\n        mode: Medium.richMode,\n        attributes: null,\n        drag: true,\n        tags: {\n            'break': 'br',\n            'horizontalRule': 'hr',\n            'paragraph': 'p',\n            'outerLevel': ['pre', 'blockquote', 'figure', 'div', 'ul'],\n            'innerLevel': ['a', 'b', 'u', 'i', 'img', 'strong', 'em', 'span', 'sub', 'sup', 'ul', 'li', 'ol']\n        },\n        pasteAsText: true,\n        keyContext: {\n            'backspace': function(e, element) {\n                var n_sib = element.nextSibling;\n                var p_sib = element.previousSibling;\n                console.log(element);\n                if ((element.tagName == 'P') &amp;&amp; ((element.innerText.length &lt;= 2)) || (element.innerText == '')) {\n                    $(element).css('margin-left', 0);\n                }\n                if (element.tagName == 'IMG') {\n                    $(element).remove();\n                }\n            }\n        }\n    });\n\n    var update_panels = function(panel_id) {\n\n        var $wrapper = $_w.find(\".panels\"),\n            $parent = $wrapper.parent('.panel-wrapper'),\n            $panels = $wrapper.find('.panel'),\n            $buttons = $parent.find('.panel-switcher');\n\n        $buttons.removeClass('active');\n        $buttons.filter('[href=\"' + panel_id + '\"]').addClass('active');\n\n        $panels.hide(0, function() {\n            $(panel_id).show(0);\n        });\n\n    };\n\n    var init_panels = function() {\n\n        var $wrapper = $_w.find(\".panels\"),\n            $parent = $wrapper.parent('.panel-wrapper'),\n            $panels = $wrapper.find('.panel'),\n            $buttons = $parent.find('.panel-switcher');\n\n        var currpanelid = '#' + $panels.eq(currPanel).attr('id');\n\n        if (typeof prevpanel === 'undefined') {\n            prevpanel = currpanelid;\n        }\n\n        $buttons.each(function() {\n            var $a = $(this);\n            $a.unbind('click').click(function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                if ($a.hasClass('disable-switch')) {\n                    return false;\n                }\n                else {\n                    prevpanel = currpanelid;\n                    update_panels($a.attr('href'));\n                }\n            });\n        });\n\n        update_panels(currpanelid);\n\n    };\n\n    var set_page_margin = function set_page_margin(side, size) {\n        $_w.find('.docwriter_document_page').css('padding-'+side, size);\n    };\n\n    var set_page_contents = function set_page_contents(html) {\n        medium.value(html);\n    };\n\n    var get_page_margin = function get_page_margin(side) {\n        if (typeof side === 'undefined') {\n            return {\n                top: $_w.find('.docwriter_document_page').css('padding-top'),\n                left: $_w.find('.docwriter_document_page').css('padding-left'),\n                bottom: $_w.find('.docwriter_document_page').css('padding-bottom'),\n                right: $_w.find('.docwriter_document_page').css('padding-right')\n            };\n        }\n        else {\n            return $_w.find('.docwriter_document_page').css('padding-'+side);\n        }\n    };\n\n    var get_page_contents = function get_page_contents() {\n        return medium.value();\n    };\n\n    var get_page_properties = function get_page_properties(prop) {\n        switch (prop) {\n            case 'margin' :\n                return get_page_margin();\n            break;\n        }\n    };\n\n    var open_document = function open_document(path) {\n        if (typeof path === 'undefined') {\n            var opts = {startAt: _u.userDir('Documents'), parent_pid: this_process_name, parent_iid: instance};\n            if (typeof file_info.internalPath != 'undefined') {\n                var file = new FlatOS.File(file_info.internalPath);\n                opts.startAt = file.dirname();\n            }\n            new FlatOS.System.FileSelectorWindow(opts, function(filepath) {\n                var file = new FlatOS.File(filepath);\n                file_info.internalPath = filepath;\n                file_info.path = file.externalPath();\n                file_info.name = file.filename();\n                var doc = JSON.parse(file.read());\n                for (var side in doc.doc_properties.page_margin) {\n                    set_page_margin(side, doc.doc_properties.page_margin[side]);\n                }\n                set_page_contents(doc.doc_contents);\n            });\n        }\n        else {\n            var file = new FlatOS.File(path);\n            file_info.internalPath = path;\n            file_info.path = file.externalPath();\n            file_info.name = file.filename();\n            var doc = JSON.parse(file.read());\n            for (var side in doc.doc_properties.page_margin) {\n                set_page_margin(side, doc.doc_properties.page_margin[side]);\n            }\n            set_page_contents(doc.doc_contents);\n        }\n    };\n\n    var deactivate_all = function deactivate_all() {\n        $(docwriter_documents).each(function(idx) {\n            $('.aloha-caret').remove();\n            aloha.mahalo($(this)[0]);\n            docwriter_documents.splice(idx, 1);\n        });\n    };\n\n    var activate_this = function activate_this(el) {\n        docwriter_documents.push(el);\n        console.log(docwriter_documents);\n\n        aloha($(el)[0]);\n\n        function middleware(event) {\n            $_w.find('.active').removeClass('active');\n            if ('leave' !== event.type) {\n                var states = aloha.ui.states(docwriter_commands, event);\n                for (var selector in states) {\n                    $_w.find('.action-' + selector)\n                        .toggleClass('active', states[selector]);\n                }\n            }\n            return event;\n        }\n        aloha.editor.stack.unshift(middleware);\n\n        for (var command in docwriter_commands) {\n            $_w.find('.action-' + command).unbind().on(\n                'click',\n                aloha.ui.command(docwriter_commands[command])\n            );\n        }\n\n    };\n\n    var add_page = function add_page() {\n        $_w.find('.docwriter_document_page')\n        .click(function() {\n            if (docwriter_documents.length &gt;= 1) {\n                deactivate_all();\n            }\n            activate_this($_w.find('.docwriter_document_page_content'));\n        });\n    };\n\n    _w.on('init', function() {\n        var $wrapper = $_w.find(\".panels\"),\n            $parent = $wrapper.parent('.panel-wrapper'),\n            $panels = $wrapper.find('.panel'),\n            $buttons = $parent.find('.panel-switcher');\n\n        $buttons.each(function() {\n            $(this).attr('href', $(this).attr('href')+instance);\n        });\n        $panels.each(function() {\n            $(this).attr('id', $(this).attr('id')+instance);\n        });\n\n        init_panels();\n\n        $(['paste', 'cut', 'copy', 'bold']).each(function() {\n            icon = this;\n            $_w.find('.icon-'+icon).replaceWith(_i.getIcon(icon, 'action-'+icon));\n        });\n\n        var article = $_w.find('.docwriter_document_page_content')[0],\n    \t\tcontainer = $_w[0];\n\n        $(['ul', 'ol']).each(function() {\n            var el = this;\n            $_w.find('.dropdown-'+el).click(function() {\n                var $el = $_w.find('.action-'+el);\n                var el_offset = $el.offset();\n                el_offset.top += $el.height();\n                el_offset.left += $el.width();\n                $_w.find('.docwriter_dropdown').hide(0);\n                $_w.find('.docwriter_dropdown_'+el)\n                .show(0)\n                .offset(el_offset)\n                .one('click.docwriter_hide_dropdown', function() {\n                    $(this).hide(0);\n                    $(article).off('click.docwriter_hide_dropdown');\n                });\n                $(article).one('click.docwriter_hide_dropdown', function() {\n                    $_w.find('.docwriter_dropdown_'+el).hide(0);\n                });\n            });\n        });\n\n        article.highlight = function() {\n            console.log(medium);\n            console.log(Medium);\n    \t};\n\n    \t$_w.find('.action-paste').mousedown(function(e) {\n    \t    // TODO: Find a way to manage the clipboard content in javascript...\n    \t    medium.paste(/* Clipboard content */);\n            return false;\n        });\n\n    \t$_w.find('.action-bold').mousedown(function() {\n    \t\tmedium.invokeElement('b', {\n    \t\t    style: \"font-weight: bold\"\n    \t    });\n    \t\treturn false;\n    \t});\n\n    \t$_w.find('.action-underline').mousedown(function() {\n    \t\tmedium.invokeElement('u', {\n    \t\t\tstyle: \"text-decoration: underline\"\n    \t\t});\n    \t\treturn false;\n    \t});\n\n    \t$_w.find('.action-italic').mousedown(function() {\n    \t\tmedium.invokeElement('i', {\n    \t\t\tstyle: \"font-style: italic\"\n    \t\t});\n    \t\treturn false;\n    \t});\n\n    \t$_w.find('.action-strike').mousedown(function() {\n    \t\tmedium.invokeElement('span', {\n    \t\t\tstyle: \"text-decoration: line-through\"\n    \t\t});\n    \t\treturn false;\n    \t});\n\n        $_w.find('.action-sub').mousedown(function() {\n    \t\tmedium.invokeElement('sub', {\n    \t\t\tstyle: \"position: relative;top: 0.75em;font-size: 0.6em;margin: 0 1px;\"\n    \t\t});\n    \t\treturn false;\n        });\n\n    \t$_w.find('.action-sup').mousedown(function() {\n    \t\tmedium.invokeElement('sup', {\n    \t\t\tstyle: \"position: relative;top: -0.75em;font-size: 0.6em;margin: 0 1px;\"\n    \t\t});\n    \t\treturn false;\n    \t});\n\n        $(['left', 'right', 'center', 'justify']).each(function() {\n            var bt = this;\n            $_w.find('.action-align_'+bt).mousedown(function() {\n                var $parent = $(medium.cursor.parent());\n                if ($parent[0].tagName != 'LI' &amp;&amp; $parent[0].tagName != 'UL' &amp;&amp; $parent[0].tagName != 'OL' &amp;&amp; $parent[0].tagName != 'IMG') {\n                    $parent = $(medium.cursor.parent('P'));\n                }\n                var side = $parent.css('text-align');\n                if (side == bt) {\n                    $parent.css('text-align', '');\n                }\n                else {\n                    $parent.css('text-align', bt);\n                }\n                medium.focus();\n            });\n        });\n\n        $(['left', 'right']).each(function() {\n            var side = this;\n            $_w.find('.action-indent_'+side).mousedown(function() {\n                var $parent = $(medium.cursor.parent());\n                if ($parent[0].tagName != 'LI' &amp;&amp; $parent[0].tagName != 'UL' &amp;&amp; $parent[0].tagName != 'OL' &amp;&amp; $parent[0].tagName != 'IMG') {\n                    $parent = $(medium.cursor.parent('P'));\n                }\n                if (side == 'left') {\n                    indent = parseInt($parent.css('margin-left')) + 10;\n                }\n                else if (side == 'right') {\n                    indent = parseInt($parent.css('margin-left')) - 10;\n                }\n                if (indent &lt; 0) {\n                    indent = 0;\n                }\n                $parent.css('margin-left', indent);\n                medium.focus();\n            });\n        });\n\n    \t$_w.find('.action-ul').mousedown(function() {\n            var $ul = $('<ul></ul>'),\n                $li = $('<li></li>'),\n                $el = $(this);\n\n            $ul.css('list-style-type', $el.attr('data-style'));\n\n            var $parent = $(medium.cursor.parent());\n\n            console.log($parent);\n            medium.focus();\n\n            if ($parent[0].tagName == 'LI') {\n                var $ul_ol = $parent.parent(),\n                    html   = $ul_ol.html();\n                $ul.html(html);\n                $ul_ol.replaceWith($ul);\n                medium.cursor.caretToEnd($ul[0]);\n            }\n            else if ($parent[0].tagName == 'UL' || $parent[0].tagName == 'OL') {\n                var $ul_ol = $parent,\n                    html   = $ul_ol.html();\n                $ul.html(html);\n                $ul_ol.replaceWith($ul);\n                medium.cursor.caretToEnd($ul[0]);\n            }\n            else {\n                $ul.append($li);\n                medium.insertHtml($ul[0]);\n            }\n\n            return false;\n        });\n\n    \t$_w.find('.action-ol').mousedown(function() {\n            var $ol = $('<ol></ol>'),\n                $li = $('<li></li>'),\n                $el = $(this);\n\n            $ol.css('list-style-type', $el.attr('data-style'));\n\n            var $parent = $(medium.cursor.parent());\n\n            medium.focus();\n\n            if ($parent[0].tagName == 'LI') {\n                var $ul_ol = $parent.parent(),\n                    html   = $ul_ol.html();\n                $ol.html(html);\n                $ul_ol.replaceWith($ol);\n                medium.cursor.caretToEnd($ol[0]);\n            }\n            else if ($parent[0].tagName == 'OL' || $parent[0].tagName == 'UL') {\n                var $ul_ol = $parent,\n                    html   = $ul_ol.html();\n                $ol.html(html);\n                $ul_ol.replaceWith($ol);\n                medium.cursor.caretToEnd($ol[0]);\n            }\n            else {\n                $ol.append($li);\n                medium.insertHtml($ol[0]);\n            }\n\n            return false;\n        });\n\n        $_w.find('.action-size_up').mousedown(function() {\n            var parent = medium.cursor.parent('SPAN'),\n                high   = medium.utils.getHighlighted(),\n                font_s = parseInt($(article).css('font-size')) + 2;\n\n            if (high.text.length &gt; 0) {\n                if (high.range.commonAncestorContainer.tagName == 'SPAN') {\n                    var $parent = $(high.range.commonAncestorContainer);\n                    font_s = parseInt($parent.css('font-size')) + 2;\n                    if ($parent.find('span').is('span')) {\n                        $parent.css('font-size', font_s);\n                        $parent.find('span').each(function() {\n                            $(this).css('font-size', parseInt($(this).css('font-size')) + 2);\n                        });\n                    }\n                    else {\n                        if ($parent.text() != high.text) {\n                            var $span  = $('<span></span>').css('font-size', font_s).text(high.text);\n                            medium.insertHtml($span[0]);\n                            medium.utils.selectNode($span[0]);\n                        }\n                        else {\n                            $parent.css('font-size', font_s);\n                            medium.utils.selectNode(high.range.commonAncestorContainer);\n                        }\n                    }\n                }\n                else if (parent &amp;&amp; parent.tagName == 'SPAN') {\n                    var $parent = $(parent);\n                    font_s = parseInt($parent.css('font-size')) + 2;\n                    if ($parent.find('span').is('span')) {\n                        $parent.css('font-size', font_s);\n                        $parent.find('span').each(function() {\n                            $(this).css('font-size', parseInt($(this).css('font-size')) + 2);\n                        });\n                    }\n                    else {\n                        if ($parent.text() != high.text) {\n                            var $span  = $('<span></span>').css('font-size', font_s).text(high.text);\n                            medium.insertHtml($span[0]);\n                            medium.utils.selectNode($span[0]);\n                        }\n                        else {\n                            $parent.css('font-size', font_s);\n                            medium.utils.selectNode(parent);\n                        }\n                    }\n                }\n                else {\n                    var $span  = $('<span></span>').css('font-size', font_s).text(high.text);\n                    medium.insertHtml($span[0]);\n                    medium.utils.selectNode($span[0]);\n                }\n            }\n\n    \t\treturn false;\n        });\n\n        $_w.find('.action-size_down').mousedown(function() {\n            var parent = medium.cursor.parent('SPAN'),\n                high   = medium.utils.getHighlighted(),\n                font_s = parseInt($(article).css('font-size')) - 2;\n\n            if (high.text.length &gt; 0) {\n                if (high.range.commonAncestorContainer.tagName == 'SPAN') {\n                    var $parent = $(high.range.commonAncestorContainer);\n                    font_s = parseInt($parent.css('font-size')) - 2;\n                    if ($parent.find('span').is('span')) {\n                        $parent.css('font-size', font_s);\n                        $parent.find('span').each(function() {\n                            $(this).css('font-size', parseInt($(this).css('font-size')) - 2);\n                        });\n                    }\n                    else {\n                        if ($parent.text() != high.text) {\n                            var $span  = $('<span></span>').css('font-size', font_s).text(high.text);\n                            medium.insertHtml($span[0]);\n                            medium.utils.selectNode($span[0]);\n                        }\n                        else {\n                            $parent.css('font-size', font_s);\n                            medium.utils.selectNode(high.range.commonAncestorContainer);\n                        }\n                    }\n                }\n                else if (parent &amp;&amp; parent.tagName == 'SPAN') {\n                    var $parent = $(parent);\n                    font_s = parseInt($parent.css('font-size')) - 2;\n                    if ($parent.find('span').is('span')) {\n                        $parent.css('font-size', font_s);\n                        $parent.find('span').each(function() {\n                            $(this).css('font-size', parseInt($(this).css('font-size')) - 2);\n                        });\n                    }\n                    else {\n                        if ($parent.text() != high.text) {\n                            var $span  = $('<span></span>').css('font-size', font_s).text(high.text);\n                            medium.insertHtml($span[0]);\n                            medium.utils.selectNode($span[0]);\n                        }\n                        else {\n                            $parent.css('font-size', font_s);\n                            medium.utils.selectNode(parent);\n                        }\n                    }\n                }\n                else {\n                    var $span  = $('<span></span>').css('font-size', font_s).text(high.text);\n                    medium.insertHtml($span[0]);\n                    medium.utils.selectNode($span[0]);\n                }\n            }\n\n    \t\treturn false;\n        });\n\n        $_w.find('.action-insert_image').mousedown(function() {\n            var opts = {startAt: _u.userDir('Pictures'), parent_pid: this_process_name, parent_iid: instance, withExt: ['jpg','bmp','gif','png']};\n            new FlatOS.System.FileSelectorWindow(opts, function(path) {\n                var img  = new Image();\n\n                img.onload = function () {\n                    var canvas = $_w.find('.docwriter_insert_image_support')[0];\n                    canvas.height = img.height;\n                    canvas.width = img.width;\n                    canvas.getContext('2d').drawImage(img,0,0,img.width,img.height);\n                    var insert = new Image();\n                    insert.onload = function() {\n                        medium.focus();\n                        medium.insertHtml(img);\n                    };\n                    insert.src = canvas.toDataURL('image/png');\n                };\n\n                img.src = new FlatOS.File(path).fileSystemPath();\n            });\n        });\n\n        $_w.find('.action-save').mousedown(function() {\n            var output = {\n                doc_properties: {\n                    page_margin: get_page_properties('margin')\n                },\n                doc_contents: get_page_contents()\n            };\n            if (typeof file_info.internalPath === 'undefined') {\n                var opts = {\n                    parent_pid: this_process_name,\n                    parent_iid: instance,\n                    contents: JSON.stringify(output),\n                    ext: 'docw',\n                    withExt: ['docw']\n                };\n                new FlatOS.System.FileSaverWindow(opts, function(saved) {\n                    console.log(saved);\n                });\n            }\n            else {\n                var isSaved = new FlatOS.File(file_info.internalPath).write(JSON.stringify(output));\n            }\n        });\n\n    });\n\n    _w.on('focus', function() {\n        medium.focus();\n    });\n\n    _w.on('close', function() {\n        medium.destroy()\n    });\n\n    _a.registerCommand('open', open_document);\n\n})(jQuery);</p>"}